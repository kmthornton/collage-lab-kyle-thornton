#BlueJ class context
comment0.params=
comment0.target=Picture()
comment0.text=\r\n\ Constructor\ that\ takes\ no\ arguments\r\n
comment1.params=fileName
comment1.target=Picture(java.lang.String)
comment1.text=\r\n\ Constructor\ that\ takes\ a\ file\ name\ and\ creates\ the\ picture\r\n\ @param\ fileName\ the\ name\ of\ the\ file\ to\ create\ the\ picture\ from\r\n
comment10.params=
comment10.target=void\ mirrorHorizontal()
comment10.text=\r\n\ flips\ the\ image\ over\ a\ horizontal\ axis\r\n
comment11.params=
comment11.target=void\ mirrorTemple()
comment11.text=\r\n\ flips\ the\ TEMPLE\r\n
comment12.params=scale
comment12.target=void\ scale(int)
comment12.text=\r\n\ makes\ an\ image\ smaller\ and\ smaller\ recursively\r\n\ @param\ the\ factor\ the\ image\ is\ scaled\ by\r\n
comment13.params=
comment13.target=void\ negative()
comment13.text=\r\n\ method\ to\ make\ an\ image\ negative\r\n\ subtracts\ the\ rgb\ values\ from\ 255\ to\ make\ a\ negative\ image\r\n
comment14.params=ammount
comment14.target=void\ edger(double)
comment14.text=\r\n\ Method\ to\ do\ a\ simple\ edge\ detection\ by\ comparing\ the\r\n\ absolute\ value\ of\ the\ difference\ between\ the\ color\ \r\n\ intensities\ (average\ of\ the\ color\ values)\ between\ a\r\n\ pixel\ and\ the\ pixel\ below\ it.\ \ If\ the\ absolute\ value\r\n\ of\ the\ difference\ between\ the\ color\ intensities\ is\r\n\ less\ than\ a\ passed\ amount\ the\ top\ pixel\ color\ \r\n\ will\ be\ set\ to\ white.\ Otherwise\ it\ is\ set\ to\ black.\r\n\ @param\ amount\ if\ the\ absolute\ value\ of\ the\ differences\r\n\ in\ the\ color\ average\ is\ less\ thatn\ this\r\n\ set\ the\ color\ to\ white,\ else\ black\r\n
comment15.params=greenPic
comment15.target=void\ greenscreen(Picture)
comment15.text=\r\n\ greenscreen\r\n\ puts\ the\ non\ green\ pixels\ of\r\n\ the\ greenscreen\ picture\ onto\ the\ original\ image\r\n\ @param\ the\ greenscreen\ picture\r\n
comment16.params=image
comment16.target=void\ merge(Picture)
comment16.text=\r\n\ merges\ two\ pictures\ by\ switching\ off\ pictures\ every\r\n\ other\ pixel\r\n\ @param\ picture\ being\ overlayed\r\n
comment2.params=width\ height
comment2.target=Picture(int,\ int)
comment2.text=\r\n\ Constructor\ that\ takes\ the\ width\ and\ height\r\n\ @param\ width\ the\ width\ of\ the\ desired\ picture\r\n\ @param\ height\ the\ height\ of\ the\ desired\ picture\r\n
comment3.params=copyPicture
comment3.target=Picture(Picture)
comment3.text=\r\n\ Constructor\ that\ takes\ a\ picture\ and\ creates\ a\r\n\ copy\ of\ that\ picture\r\n
comment4.params=image
comment4.target=Picture(java.awt.image.BufferedImage)
comment4.text=\r\n\ Constructor\ that\ takes\ a\ buffered\ image\r\n\ @param\ image\ the\ buffered\ image\ to\ use\r\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\r\n\ Method\ to\ return\ a\ string\ with\ information\ about\ this\ picture.\r\n\ @return\ a\ string\ with\ information\ about\ the\ picture\ such\ as\ fileName,\r\n\ height\ and\ width.\r\n
comment6.params=args
comment6.target=void\ main(java.lang.String[])
comment7.params=
comment7.target=void\ gray()
comment7.text=\r\n\ takes\ the\ average\ of\ the\ rgb\ values\ and\ changes\ their\ color\r\n
comment8.params=sourcePicture\ x\ y
comment8.target=void\ copy(Picture,\ int,\ int)
comment8.text=\r\n\ copies\ a\ picture\ onto\ another\ picture\r\n\ @param\ Picture\ picture\ being\ copied\r\n\ @param\ x\ \=\ xpos\r\n\ @param\ y\ \=\ ypos\r\n
comment9.params=
comment9.target=void\ mirrorVertical()
comment9.text=\r\nmirror\ around\ a\ vertical\ line\ in\ the\ middle\ based\ on\ width\r\nmakes\ the\ second\ half\ of\ the\ picture\ negative\r\n
numComments=17
